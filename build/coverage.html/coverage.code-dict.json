{"/home/travis/build/npmtest/node-npmtest-ember-cli-cordova/test.js":"/* istanbul instrument in package npmtest_ember_cli_cordova */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-cli-cordova/lib.npmtest_ember_cli_cordova.js":"/* istanbul instrument in package npmtest_ember_cli_cordova */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ember_cli_cordova = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ember_cli_cordova = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-cli-cordova/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ember-cli-cordova && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ember_cli_cordova */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ember_cli_cordova\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ember_cli_cordova.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ember_cli_cordova.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ember_cli_cordova.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ember_cli_cordova.__dirname + '/lib.npmtest_ember_cli_cordova.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-cli-cordova/node_modules/ember-cli-cordova/index.js":"'use strict';\n\nvar path = require('path');\nvar fs = require('fs');\nvar commands = require('./lib/commands');\nvar postBuild = require('./lib/tasks/post-build');\nvar defaults = require('lodash').defaults;\nvar chalk = require('chalk');\nvar mergeTrees = require('broccoli-merge-trees');\nvar Funnel = require('broccoli-funnel');\n\nmodule.exports = {\n  name: 'ember-cli-cordova',\n\n  _isTargetCordova: function () {\n    return !process.env.EMBER_CLI_CORDOVA ||\n      ['0', 'off', 'false', 'no'].indexOf(process.env.EMBER_CLI_CORDOVA.toLowerCase()) === -1;\n  },\n\n  config: function (env, config) {\n    var conf = {isCordovaBuild: this._isTargetCordova()};\n    if (conf.isCordovaBuild && env !== 'test') {\n      if (config.locationType && config.locationType !== 'hash') {\n        throw new Error('ember-cli-cordova: You must specify the locationType as \\'hash\\' in your environment.js or rename it to defaultLocationType.');\n      }\n      conf.locationType = 'hash';\n    }\n    else if (!conf.locationType) {\n      conf.locationType = config.defaultLocationType || 'auto';\n    }\n    conf.cordova = defaults(config.cordova || {}, {\n      liveReload: {\n        enabled:  false,\n        platform: 'ios'\n      }\n    });\n    return conf;\n  },\n\n  contentFor: function (type) {\n    if (this._isTargetCordova() && type === 'body') {\n      return '<script src=\"cordova.js\"></script>';\n    }\n  },\n\n  includedCommands: function () {\n    return commands;\n  },\n\n  cdvConfig: function () {\n    return this.project.config(process.env.EMBER_ENV || 'development').cordova;\n  },\n\n  postBuild: function () {\n    if (this._isTargetCordova()) {\n      return postBuild(this.project, this.cdvConfig())();\n    }\n    else {\n      return function () {\n      };\n    }\n  },\n\n  treeForPublic: function (tree) {\n    var config = this.cdvConfig();\n\n    if (this._isTargetCordova() && config.liveReload.enabled) {\n      if (!config.liveReload.platform) {\n        throw new Error('ember-cli-cordova: You must specify a liveReload.platform in your environment.js');\n      }\n\n      var platformsPath = path.join(this.project.root, 'cordova', 'platforms');\n      var pluginsPath;\n\n      if (config.liveReload.platform === 'ios') {\n        pluginsPath = path.join(platformsPath, 'ios', 'www');\n      }\n      else if (config.liveReload.platform === 'browser') {\n        pluginsPath = path.join(platformsPath, 'browser', 'www');\n      }\n      else if (config.liveReload.platform === 'android') {\n        pluginsPath = path.join(platformsPath, 'android', 'assets', 'www');\n      }\n      else {\n        pluginsPath = path.join(platformsPath, config.liveReload.platform);\n      }\n\n      var files = ['cordova.js', 'cordova_plugins.js'];\n\n      files.forEach(function (file) {\n        var filePath = path.join(pluginsPath, file);\n        if (!fs.existsSync(filePath)) {\n          var err = new Error('ember-cli-cordova: ' + filePath + ' did not exist. It is required for Device LiveReload to work.');\n          err.stack = null;\n          throw err;\n        }\n      });\n\n      if (fs.existsSync(path.join(pluginsPath, 'plugins'))) {\n        files.push('plugins/**');\n      }\n\n      var pluginsTree = new Funnel(this.treeGenerator(pluginsPath), {\n        srcDir:  '/',\n        include: files,\n        destDir: '/'\n      });\n\n      console.log(chalk.green('ember-cli-cordova: Device LiveReload is enabled'));\n\n      return mergeTrees([tree, pluginsTree]);\n    }\n\n    return tree;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-cordova/node_modules/ember-cli-cordova/lib/commands/index.js":"module.exports = {\n  'cordova':         require('./cordova'),\n  'cordova:build':   require('./build'),\n  'cordova:open':    require('./open'),\n  'cordova:prepare': require('./prepare'),\n  'cordova:archive': require('./archive')\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-cordova/node_modules/ember-cli-cordova/lib/commands/cordova.js":"'use strict';\n\nvar path    = require('path');\nvar chalk   = require('chalk');\n\nmodule.exports = {\n  name: 'cordova',\n  aliases: ['cdv'],\n  description: 'Passes commands(plugin(s), platform(s), run, emulate) and arguments to the cordova command',\n  works: 'insideProject',\n  allowedCordovaCommands: [\n    'plugin', 'plugins', 'platform', 'platforms', 'run', 'emulate'\n  ],\n\n  validateAndRun: function(rawArgs) {\n    if(this.allowedCordovaCommands.indexOf(rawArgs[0]) > -1) {\n      return this.run({}, rawArgs);\n    }\n  },\n\n  run: function(options, rawArgs) {\n    return require('../tasks/cordova')(rawArgs, this.project)();\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-cordova/node_modules/ember-cli-cordova/lib/commands/build.js":"'use strict';\n\nvar path            = require('path');\nvar chalk           = require('chalk');\nvar defaultPlatform = require('../utils/default-platform');\n\nmodule.exports = {\n  name: 'cordova:build',\n  aliases: ['cdv:build'],\n  description: 'Build the ember and cordova project together running in the simulator or on a device',\n  works: 'insideProject',\n\n  availableOptions: [\n    { name: 'environment', type: String, default: 'development' },\n    { name: 'platform', type: String }\n  ],\n\n  run: function(options) {\n    var platform = options.platform || defaultPlatform(this.project);\n    return require('../tasks/build')(options.environment, platform, this.project)();\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-cordova/node_modules/ember-cli-cordova/lib/utils/default-platform.js":"module.exports = function defaultPlatform(project) {\n  var config = project.config().cordova || {};\n  return config.platform || 'ios';\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-cordova/node_modules/ember-cli-cordova/lib/commands/open.js":"'use strict';\n\nvar path            = require('path');\nvar defaultPlatform = require('../utils/default-platform');\n\nmodule.exports = {\n  name: 'cordova:open',\n  aliases: ['cdv:open'],\n  description: 'Open the native platform project with the default or specified application',\n  works: 'insideProject',\n\n  availableOptions: [\n    { name: 'platform', type: String },\n    { name: 'application', type: String}\n  ],\n\n  run: function(options) {\n    var platform = options.platform || defaultPlatform(this.project);\n    return require('../tasks/open')(this.project, platform, options.application)();\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-cordova/node_modules/ember-cli-cordova/lib/commands/prepare.js":"var path       = require('path');\nvar linkEnv    = require('../tasks/link-environment');\nvar runCommand = require('../utils/run-command');\nvar Promise    = require('../ext/promise');\n\nmodule.exports = {\n  name: 'cordova:prepare',\n  aliases: ['cdv:prepare'],\n  description: 'Needed after cloning or copying a project.',\n  works: 'insideProject',\n\n  run: function() {\n    var installDeps = runCommand('npm install && bower install', 'Installing npm and bower dependencies', {\n      cwd: this.project.root\n    });\n\n    // Because of this being parallel. It breaks the logging and it looks like\n    //\n    //   Symlinking ember dir to cordova www...\n    //   Installing npm and bower dependencies...donedone\n    return Promise.all([linkEnv(this.project)(), installDeps()]);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-cordova/node_modules/ember-cli-cordova/lib/tasks/link-environment.js":"'use strict';\n\nvar Promise    = require('../ext/promise');\nvar fs         = require('fs-extra');\nvar symlink    = Promise.denodeify(fs.symlink);\nvar remove     = Promise.denodeify(fs.remove);\nvar path       = require('path');\nvar chalk      = require('chalk');\nvar verifyDist = require('./verify-dist');\n\nmodule.exports = function(project){\n  if(!project) {\n    throw new Error('A project must be passed into this function');\n  }\n\n  var cordovaPath = path.join(project.root, 'cordova');\n  var wwwPath     = path.join(cordovaPath, 'www');\n\n  return function() {\n    // allows us to do a relative symlink\n    process.chdir(cordovaPath);\n\n    return remove(wwwPath)\n            .then(symlink.bind(this, '../dist', 'www', 'dir'))\n            .then(verifyDist(project));\n  };\n};\n\n","/home/travis/build/npmtest/node-npmtest-ember-cli-cordova/node_modules/ember-cli-cordova/lib/ext/promise.js":"// https://github.com/stefanpenner/ember-cli/blob/master/lib/ext/promise.js\n'use strict';\n\nvar RSVP    = require('rsvp');\nvar Promise = RSVP.Promise;\n\nmodule.exports = PromiseExt;\n\n// Utility functions on on the native CTOR need some massaging\nmodule.exports.hash = function() {\n  return this.resolve(RSVP.hash.apply(null, arguments));\n};\n\nmodule.exports.denodeify = function() {\n  var fn = RSVP.denodeify.apply(null, arguments);\n  var Constructor = this;\n\n  return function() {\n    return Constructor.resolve(fn.apply(null, arguments));\n  };\n};\n\nmodule.exports.filter = function() {\n  return this.resolve(RSVP.filter.apply(null, arguments));\n};\n\nmodule.exports.map = function() {\n  return this.resolve(RSVP.map.apply(null, arguments));\n};\n\nfunction PromiseExt() {\n  Promise.apply(this, arguments);\n}\n\nPromiseExt.prototype = Object.create(Promise.prototype);\nPromiseExt.prototype.constructor = PromiseExt;\nPromiseExt.__proto__ = Promise;\n\nPromiseExt.prototype.returns = function(value) {\n  return this.then(function() {\n    return value;\n  });\n};\n\nPromiseExt.prototype.invoke = function(method) {\n  var args = Array.prototype.slice(arguments, 1);\n\n  return this.then(function(value) {\n    return value[method].apply(value, args);\n  }, undefined, 'invoke: ' + method + ' with: ' + args);\n};\n\nPromiseExt.prototype.map = function(mapFn) {\n  var Constructor = this.constructor;\n\n  return this.then(function(values) {\n    return Constructor.map(values, mapFn);\n  });\n};\n\nPromiseExt.prototype.filter = function(mapFn) {\n  var Constructor = this.constructor;\n\n  return this.then(function(values) {\n    return Constructor.filter(values, mapFn);\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-cordova/node_modules/ember-cli-cordova/lib/tasks/verify-dist.js":"'use strict';\n\nvar runCommand = require('../utils/run-command');\nvar path       = require('path');\nvar fs         = require('fs');\nvar Promise    = require('../ext/promise');\n\nmodule.exports = function(project) {\n  return function() {\n    var distPath = path.join(project.root, 'dist');\n\n    if(fs.existsSync(distPath)) {\n      return Promise.resolve();\n    } else {\n      return runCommand('ember build', 'Building ember app since dist/ dir doesn\\'t exist yet', {\n        cwd: project.root\n      })();\n    }\n\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-cordova/node_modules/ember-cli-cordova/lib/utils/run-command.js":"'use strict';\n\nvar Promise  = require('../ext/promise');\nvar exec     = require('child_process').exec;\nvar chalk    = require('chalk');\nvar ui       = require('../ui');\nvar defaults = require('lodash').defaults;\n\nmodule.exports = function runCommand(command, startedMsg, options) {\n  if(options == null) {\n    options = {}\n  }\n\n  return function() {\n    if(startedMsg) {\n      ui.start(chalk.green(startedMsg));\n    }\n\n    options = defaults(options, {\n      maxBuffer: 5000 * 1024\n    });\n\n    return new Promise(function(resolve, reject) {\n      exec(command, options, function(err, stdout, stderr) {\n        ui.write('\\n');\n\n        if (stdout && stdout.length) {\n          ui.write(stdout);\n        }\n\n        if (stderr && stderr.length) {\n          ui.write(stderr);\n        }\n\n        if (err) {\n          return reject(commandError(command, err));\n        }\n\n        resolve(stdout);\n      });\n    });\n  };\n};\n\nfunction commandError(command, err) {\n  ui.write(chalk.red('\\nError thrown while running shell command: \"' + command + '\"\\n'));\n  if(err.stack) {\n    ui.write(err.stack);\n  } else {\n    ui.write(err);\n  }\n}\n\n","/home/travis/build/npmtest/node-npmtest-ember-cli-cordova/node_modules/ember-cli-cordova/lib/ui/index.js":"'use strict';\n\nvar PleasantProgress = require('pleasant-progress');\n\nmodule.exports = {\n  pleasantProgress: new PleasantProgress(),\n  start: function(msg) {\n    this.pleasantProgress.stop(true);\n    this.pleasantProgress.start(msg)\n  },\n  write: function(msg) {\n    this.pleasantProgress.stream.write(msg);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-cordova/node_modules/ember-cli-cordova/lib/commands/archive.js":"'use strict';\n\nvar path              = require('path');\nvar projectWithConfig = require('../models/project-with-config');\n\nmodule.exports = {\n  name: 'cordova:archive',\n  aliases: ['cdv:archive'],\n  description: 'Build project and create xcode archive. If the tag or commit options are present they will be performed after archiving.',\n  works: 'insideProject',\n\n  anonymousOptions: [\n    '<version>'\n  ],\n\n  availableOptions: [\n    { name: 'environment', type: String, default: 'staging' },\n    { name: 'tag', type: Boolean, default: false },\n    { name: 'commit', type: Boolean, default: false }\n  ],\n\n  run: function(options, rawArgs) {\n    projectWithConfig(this.project);\n    var version = rawArgs[0];\n\n    return require('../tasks/archive')(version, options, this.project)();\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-cordova/node_modules/ember-cli-cordova/lib/models/project-with-config.js":"'use strict';\n\nvar stringUtils = require('../utils/string');\n\nvar getComId = function(project) {\n\n  var fs   = require('fs');\n  var path = require('path');\n\n  var configPath = path.join(project.root, 'cordova', 'config.xml');\n  var configFile = fs.readFileSync(configPath, { encoding: 'utf-8'});\n\n  var idRegex = /id=\\\"([\\w\\-\\.]+)\\\"/;\n  var matches = configFile.match(idRegex);\n\n  if(matches.length) {\n    return matches[1];\n  }\n\n  throw new Error('Unable to find an id within your cordova/config.xml');\n}\n\nmodule.exports = function(project, id) {\n  project.cordovaConfig = {\n    name:  stringUtils.classify(project.name()),\n    id:    id || getComId(project)\n  };\n\n  return project;\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-cordova/node_modules/ember-cli-cordova/lib/utils/string.js":"// https://github.com/emberjs/ember.js/blob/v1.5.0/packages/ember-runtime/lib/system/string.js\n'use strict';\n\nvar STRING_DECAMELIZE_REGEXP = (/([a-z\\d])([A-Z])/g);\nvar _s = require('underscore.string');\n\nmodule.exports = {\n  decamelize: function(str) {\n    return str ? str.replace(STRING_DECAMELIZE_REGEXP, '$1_$2').toLowerCase() : '';\n  },\n  dasherize: function(str) {\n    return str ? _s.dasherize(str).replace(/^\\-/, '') : '';\n  },\n  classify: function(str) {\n    // Have to humanize first so that 'MyApp' doesnt turn into 'Myapp'\n    return str ? _s.classify(_s.humanize(str)) : '';\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-cordova/node_modules/ember-cli-cordova/lib/tasks/post-build.js":"'use strict';\n\nvar runCommand      = require('../utils/run-command');\nvar defaultPlatform = require('../utils/default-platform');\nvar path            = require('path');\nvar chalk           = require('chalk');\nvar ui              = require('../ui');\nvar Promise         = require('../ext/promise');\n\nfunction createCommand(project, options) {\n  var platform = options.platform || defaultPlatform(project);\n  var command  = 'cordova build ' + platform;\n\n  if (options.emulate) {\n    command += ' && cordova emulate ' + platform;\n\n    if (options.emulateTarget) {\n      if (options.emulateTarget[platform]) {\n        command += ' --target=\"' + options.emulateTarget[platform] + '\"';\n      }\n    }\n  }\n\n  return runCommand(command, null, {\n    cwd: path.join(project.root, 'cordova')\n  });\n}\n\nmodule.exports = function(project, options) {\n  if (!options.rebuildOnChange) {\n    return function() {};\n  }\n\n  return function() {\n    var rebuild = createCommand(project, options)();\n\n    rebuild.then(function() {\n      ui.write(chalk.green('Cordova build successful.\\n'));\n    });\n\n    return Promise.resolve();\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-cordova/node_modules/ember-cli-cordova/Brocfile.js":"/* global require, module */\n\nvar EmberAddon = require('ember-cli/lib/broccoli/ember-addon');\n\nvar app = new EmberAddon({\n  wrapInEval: false\n});\n\n// Use `app.import` to add additional libraries to the generated\n// output files.\n//\n// If you need to use different assets in different\n// environments, specify an object as the first parameter. That\n// object's keys should be the environment name and the values\n// should be the asset to use in that environment.\n//\n// If the library that you are including contains AMD or ES6\n// modules that you would like to import into your application\n// please specify an object with the list of modules as keys\n// along with the exports of each module as its value.\n\napp.import('bower_components/sinon/index.js', {\n  type: 'test'\n});\n\nmodule.exports = app.toTree();\n","/home/travis/build/npmtest/node-npmtest-ember-cli-cordova/node_modules/ember-cli-cordova/addon/initializers/in-app-livereload.js":"import redirect from '../utils/redirect';\n\nexport var initialize = function(app, config) {\n  var url = config.cordova.emberUrl || 'http://localhost:4200';\n  return redirect(url);\n};\n\nexport default {\n  name: 'cordova:in-app-livereload',\n  initialize: initialize\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-cordova/node_modules/ember-cli-cordova/addon/mixins/cordova-events.js":"/* jshint esnext:true */\n\nimport Ember from 'ember';\n\n// include this mixin to define cordova event listeners with an onCordova object\n//\n// onCordova supports arrays, strings, and anonymous functions, e.g.:\n//\n// ```\n// export default MyEmberObject.extend({\n//   onCordova: {\n//     pause: ['pauseListening', 'disconnectPeripheral'],\n//     resume: 'resumeListening',\n//     volumeup: function() { console.log('a little bit louder now'); }\n//   }\n// });\n// ```\nexport default Ember.Mixin.create({\n  cordova: Ember.inject.service(),\n\n  subscribeToCordovaEvents: Ember.on('init', function() {\n    var cordova = this.get('cordova'),\n        onCordova = this.get('onCordova');\n\n    Ember.keys(onCordova).forEach(function(key) {\n      var func = Ember.get(onCordova, key);\n\n      // subscribe to events\n      if (func instanceof Array) {\n        func.forEach(function(fn) {\n          if (this._validateIsFunction(fn)) {\n            cordova.on(key, this, fn);\n          }\n        }, this);\n      } else {\n        if (this._validateIsFunction(func)) {\n          cordova.on(key, this, func);\n        }\n      }\n    }, this);\n  }),\n\n  _validateIsFunction: function(func) {\n    var isFunction = false;\n\n    if (func instanceof Function) {\n      isFunction = true;\n    } else if (typeof func === 'string') {\n      var fn = this.get(func);\n\n      isFunction = fn instanceof Function;\n    }\n\n    return isFunction;\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-cordova/node_modules/ember-cli-cordova/addon/services/cordova.js":"/* jshint esnext:true */\n\nimport Ember from 'ember';\n\n// from https://cordova.apache.org/docs/en/4.0.0/cordova_events_events.md.html\n// use var because cordova/android was throwing errors re: const && strict mode\nvar CORDOVA_EVENTS = Ember.A([\n  'deviceready',\n  'pause',\n  'resume',\n  'backbutton',\n  'menubutton',\n  'searchbutton',\n  'startcallbutton',\n  'endcallbutton',\n  'volumedownbutton',\n  'volumeupbutton',\n  'batterycritical',\n  'batterylow',\n  'batterystatus',\n  'online',\n  'offline'\n]);\n\n// the cordova service listens for cordova events emitted to the document,\n// and triggers the same events in emberland.\n//\n// subscribe to cordova events as such:\n//\n// ```javascript\n// export default MyEmberObject.extend({\n//   cordova: Ember.inject.service()\n//\n//   init: function() {\n//     cordova.on('resume', function() { console.log('i am resumed'); });\n//   }\n// });\n// ```\nexport default Ember.Service.extend(\n  Ember.Evented, {\n\n  setEventTriggers: Ember.on('init', function() {\n    var _this = this;\n\n    CORDOVA_EVENTS.forEach(function(eventName) {\n      Ember.$(document).on(eventName, function() {\n        _this.trigger(eventName);\n      });\n    });\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-cordova/node_modules/ember-cli-cordova/addon/utils/redirect.js":"import Ember from 'ember';\n\nexport default function(url) {\n  if(window.location.href.indexOf('file://') > -1) {\n    Ember.run.later(function() {\n      window.location.replace(url);\n    }, 50);\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-ember-cli-cordova/node_modules/ember-cli-cordova/app/components/cdv-nav-bar.js":"import Ember from 'ember';\n\nexport default Ember.Component.extend({\n  tagName: 'header'\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-cordova/node_modules/ember-cli-cordova/lib/tasks/add-platforms.js":"'use strict';\n\nvar runCommand = require('../utils/run-command');\nvar path       = require('path');\n\nmodule.exports = function(project, options) {\n  var command = 'cordova platforms add ' + options.platform;\n\n  return runCommand(command, 'Adding ' + options.platform + ' platform to cordova', {\n    cwd: path.join(project.root, 'cordova')\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-cordova/node_modules/ember-cli-cordova/lib/tasks/create-cordova-project.js":"'use strict';\n\nvar runCommand = require('../utils/run-command');\nvar path       = require('path');\n\nmodule.exports = function(project) {\n  var config  = project.cordovaConfig;\n  var command = 'cordova create cordova ' + config.id + ' ' + config.name;\n\n  return runCommand(command, 'Creating Cordova project', {\n    cwd: project.root\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-cordova/node_modules/ember-cli-cordova/lib/tasks/modify-xml.js":"'use strict';\n\nvar fs      = require('fs');\nvar chalk   = require('chalk');\nvar path    = require('path');\nvar ui      = require('../ui');\nvar Promise = require('../ext/promise');\n\n// Used as the context of this for the replaceFn so it can be used\nvar replaceObject = {\n  xmlReplace: function(regex, value, xml) {\n    return xml.replace(regex, '$1' + value + '$2');\n  }\n};\n\nmodule.exports = function(message, root, replaceFn) {\n  return function modifyXml() {\n    return new Promise(function(resolve, reject){\n      try {\n        var configPath = path.join(root, 'config.xml');\n\n        ui.start(chalk.green(message));\n\n        var xml = fs.readFileSync(configPath, { encoding: 'utf8' });\n\n        xml = replaceFn.call(replaceObject, xml);\n\n        fs.writeFileSync(configPath, xml);\n        resolve();\n\n      } catch(e) {\n        reject(e);\n      }\n    });\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-cordova/node_modules/ember-cli-cordova/lib/tasks/update-config-xml-android-version-code.js":"'use strict';\n\nvar fs      = require('fs');\nvar path    = require('path');\nvar Promise = require('../ext/promise');\n\nvar versionCodeRegex = /(android-versionCode=\\\")[\\d.]+(\\\")/;\nvar versionCodeMatch = /android-versionCode=\\\"([\\d.])+\\\"/;\n\nmodule.exports = function(project) {\n  return new Promise(function(resolve, reject){\n    try {\n      var cordovaPath = path.join(project.root, 'cordova');\n      var configPath = path.join(cordovaPath, 'config.xml');\n      var xml = fs.readFileSync(configPath, { encoding: 'utf8' });\n\n      var match = xml.match(versionCodeMatch);\n      if(match) {\n        var versionCode = (parseInt(match[1], 10)) + 1;\n        var message     = 'Update config.xml with android-versionCode ' + versionCode;\n\n        return require('./modify-xml')(message, cordovaPath, function(xml) {\n          return this.xmlReplace(versionCodeRegex, versionCode, xml);\n        })().then(resolve, reject);\n      } else {\n        reject();\n      }\n    } catch (e) {\n      reject(e);\n    }\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-cordova/node_modules/ember-cli-cordova/lib/tasks/update-config-xml.js":"'use strict';\n\nvar path    = require('path');\n\n// Match the outer tags so we can match and reinsert them with a String#replace\nvar idRegex        = /(id=\\\")[\\w\\.]+(\\\")/;\nvar nameRegex      = /(<name>)\\w+(<\\/name>)/;\nvar endWidgetRegex = /(.*)(<\\/widget>)/;\n\nvar preferences = [\n  // haha, 4 spaces at the beginning\n  '    <preference name=\"DisallowOverscroll\" value=\"true\" />'\n];\n\nmodule.exports = function(project) {\n  var config = project.cordovaConfig;\n  var message = 'Update config.xml with your project settings';\n  var cordovaPath = path.join(project.root, 'cordova');\n\n  return require('./modify-xml')(message, cordovaPath, function(xml) {\n    xml = this.xmlReplace(idRegex, config.id, xml);\n    xml = this.xmlReplace(nameRegex, config.name, xml);\n\n    // add preference tag(s)\n    xml = this.xmlReplace(endWidgetRegex, preferences.join('\\n') + '\\n', xml);\n\n    return xml;\n  });\n};\n\n","/home/travis/build/npmtest/node-npmtest-ember-cli-cordova/node_modules/ember-cli-cordova/lib/tasks/update-config-xml-version.js":"'use strict';\n\nvar path = require('path');\n\nvar versionRegex = /(version=\\\")[\\d.]+(\\\")/;\n\nmodule.exports = function(version, project) {\n  var message     = 'Update config.xml with version ' + version;\n  var cordovaPath = path.join(project.root, 'cordova');\n\n  return require('./modify-xml')(message, cordovaPath, function(xml) {\n    return this.xmlReplace(versionRegex, version, xml);\n  });\n\n};\n"}